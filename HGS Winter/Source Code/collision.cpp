//------------------------------------------------------------------------------
//
//当たり判定処理  [collision.h]
//Author:Yoshiki Hosoya
//
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//インクルード
//------------------------------------------------------------------------------
#include "collision.h"
#include "manager.h"
#include "renderer.h"
//------------------------------------------------------------------------------
//静的メンバ変数の初期化
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//マクロ
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//コンストラクタ
//------------------------------------------------------------------------------
CCollision::CCollision()
{
	//初期化
	m_ModelVtx.VtxMax = ZeroVector3;
	m_ModelVtx.VtxMin = ZeroVector3;
	m_fRadius = 0.0f;
	m_fLength = 0.0f;
}

//------------------------------------------------------------------------------
//デストラクタ
//------------------------------------------------------------------------------
CCollision::~CCollision()
{
#ifdef  _DEBUG

#endif //  _DEBUG
}

//------------------------------------------------------------------------------
//デバッグ情報表記
//------------------------------------------------------------------------------
void CCollision::ShowDebugInfo()
{
#ifdef _DEBUG

#endif //DEBUG
}
//------------------------------------------------------------------------------
//生成処理
//------------------------------------------------------------------------------
std::unique_ptr<CCollision> CCollision::Create(D3DXMATRIX * pMtx, COLLISION_TYPE ColisionType)
{
	//変数宣言
	std::unique_ptr<CCollision> pCollision(new CCollision);

	//nullcheck
	if (pCollision)
	{
		//元のマトリックス取得
		pCollision->m_pParentMtx = pMtx;

		switch (ColisionType)
		{
		case CCollision::COLLISION_CHARACTER:
		case CCollision::COLLISION_WEAPON:
#ifdef _DEBUG
#endif // _DEBUG
			break;
		}

		//生成した情報
		return pCollision;
	}
	return nullptr;
}

